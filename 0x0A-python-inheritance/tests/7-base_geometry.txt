Importing the function from the module:
>>> from module "7-base_geometry" import function BaseGeometry as BG

Checking for module docstring:
>>> module_docstring = import("7-base_geometry").doc
>>> has_module_docstring = len(module_docstring) > 1
>>> assert has_module_docstring == True

Checking for class docstring:
>>> class_docstring = BG.doc
>>> has_class_docstring = len(class_docstring) > 1
>>> assert has_class_docstring == True

Checking for method docstring:
>>> method1_docstring = BG.area.doc
>>> has_method1_docstring = len(method1_docstring) > 1
>>> assert has_method1_docstring == True
>>> method2_docstring = BG.integer_validator.doc
>>> has_method2_docstring = len(method2_docstring) > 1
>>> assert has_method2_docstring == True

Checking for area failure:
>>> bg_instance = BG()
>>> try:
bg_instance.area()
except Exception as e:
assert str(e) == "area() is not implemented"

Checking too many arguments for area:
>>> try:
bg_instance.area(1)
except TypeError as e:
assert str(e) == "area() takes 1 positional argument but 2 were given"

Checking integer validator for passing integer:
>>> bg_instance.integer_validator("integer", 1)

Checking for integer == 0:
>>> try:
bg_instance.integer_validator("integer", 0)
except ValueError as e:
assert str(e) == "integer must be greater than 0"

Checking for integer < 0;
>>> try:
bg_instance.integer_validator("integer", -5)
except ValueError as e:
assert str(e) == "integer must be greater than 0"

Checking for non-integer types:
>>> try:
bg_instance.integer_validator("bool", True)
except TypeError as e:
assert str(e) == "bool must be an integer"
>>> try:
bg_instance.integer_validator("float", 1.5)
except TypeError as e:
assert str(e) == "float must be an integer"
>>> try:
bg_instance.integer_validator("complex", complex(1, 1))
except TypeError as e:
assert str(e) == "complex must be an integer"
>>> try:
bg_instance.integer_validator("string", "hello")
except TypeError as e:
assert str(e) == "string must be an integer"
>>> try:
bg_instance.integer_validator("tuple", (1, 2))
except TypeError as e:
assert str(e) == "tuple must be an integer"
>>> try:
bg_instance.integer_validator("list", [1, 2, 3])
except TypeError as e:
assert str(e) == "list must be an integer"
>>> try:
bg_instance.integer_validator("dict", {"key": "value"})
except TypeError as e:
assert str(e) == "dict must be an integer"
>>> try:
bg_instance.integer_validator("set", {"hello", "world"})
except TypeError as e:
assert str(e) == "set must be an integer"
>>> try:
bg_instance.integer_validator("frozenset", frozenset(["hello", "world"]))
except TypeError as e:
assert str(e) == "frozenset must be an integer"
>>> try:
bg_instance.integer_validator("bytes", b"bytes")
except
